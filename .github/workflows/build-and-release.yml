name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get current version
        id: get_version
        run: echo ::set-output name=VERSION::$(node -p "require('./package.json').version")

      - name: Get previous version
        id: get_previous_version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.commits[0].id != github.event.before
        run: |
          git fetch --depth=1 origin +refs/heads/main
          echo ::set-output name=PREVIOUS_VERSION::$(git log -1 --pretty=format:%s $(git merge-base HEAD FETCH_HEAD) | sed -nE 's/^[^0-9]*(([0-9]+\.)*[0-9]+)[^0-9]*$/\1/p')

      - name: Compare versions
        id: compare_versions
        if: steps.get_previous_version.outputs.PREVIOUS_VERSION != ''
        run: |
          echo "${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}" "${{ steps.get_version.outputs.VERSION }}"
          test "${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}" != "${{ steps.get_version.outputs.VERSION }}"

      - name: Install Node.js dependencies
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        run: npm install

      - name: Build app
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        run: npm run build

      - name: package.json info
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        id: info
        uses: jaywcjlove/github-action-package@main

      - name: Zip build folder
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        run: zip -r ${{ github.event.repository.name }}-${{ steps.info.outputs.version }}.zip build

      - name: Create release
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: v${{ steps.info.outputs.version }}
          release_name: Release v${{ steps.info.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        if: steps.compare_versions.outputs.result || !steps.compare_versions.outputs.result
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-${{ steps.info.outputs.version }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ steps.info.outputs.version }}.zip
          asset_content_type: application/zip
